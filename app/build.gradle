plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'kotlin-kapt'
}

android {
    compileSdkVersion compileSdkVer

    defaultConfig {
        applicationId appId
        minSdkVersion minSdkVer
        targetSdkVersion targetSdkVer
        versionCode verCode
        versionName verName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        step2hell {
            storeFile file('step2hell.jks')
            storePassword STORE_PASSWORD // config password in local file gradle.properties( no quotation mark: STORE_PASSWORD = xxx ), do not upload into repo for security(has been added into gitignore).
            keyAlias 'step2hell'
            keyPassword KEY_PASSWORD
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            signingConfig signingConfigs.step2hell
            zipAlignEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVer"

    testImplementation "junit:junit:$junit"
    testImplementation "org.mockito:mockito-core:$mockito"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrest"
    testImplementation "com.google.truth:truth:$truth"
    testImplementation "com.google.truth.extensions:truth-java8-extension:$truth"

    androidTestImplementation "com.android.support.test:runner:$runner"
    androidTestImplementation "com.android.support.test:rules:$rules"
    androidTestImplementation "com.android.support:support-annotations:$support"
    androidTestImplementation("com.android.support.test.espresso:espresso-core:$espresso", {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    implementation "com.android.support:appcompat-v7:$support"
    implementation "com.android.support:design:$support"
    implementation "com.android.support:recyclerview-v7:$support"
    implementation "com.android.support:cardview-v7:$support"
    implementation "com.android.support.constraint:constraint-layout:$constraint"
    implementation "com.android.support:exifinterface:$support"
    implementation "com.android.support:support-compat:$support"
    implementation "com.android.support:support-content:$support"

    //  https://developer.android.google.cn/topic/libraries/architecture/adding-components
    //  https://developer.android.google.cn/kotlin/ktx
    implementation "android.arch.lifecycle:extensions:$lifecycle"
    implementation "android.arch.lifecycle:viewmodel:$lifecycle"
    implementation "android.arch.lifecycle:livedata:$lifecycle"
    implementation "android.arch.lifecycle:runtime:$lifecycle"
    implementation "android.arch.lifecycle:common-java8:$lifecycle"
    implementation "android.arch.lifecycle:reactivestreams:$lifecycle"
    testImplementation "android.arch.core:core-testing:$lifecycle"

    implementation "android.arch.persistence.room:runtime:$room"
    kapt "android.arch.persistence.room:compiler:$room"
    implementation "android.arch.persistence.room:rxjava2:$room"
    testImplementation "android.arch.persistence.room:testing:$room"

    implementation "android.arch.navigation:navigation-fragment-ktx:$navigation"
    implementation "android.arch.navigation:navigation-ui-ktx:$navigation"
    androidTestImplementation "android.arch.navigation:navigation-testing-ktx:$navigation"

    implementation "android.arch.work:work-runtime-ktx:$work"
    implementation "android.arch.work:work-firebase:$work"
    androidTestImplementation "android.arch.work:work-testing:$work"

    kapt "com.android.databinding:compiler:$gradleVer"

    implementation "org.jsoup:jsoup:$jsoup"
    implementation "com.google.code.gson:gson:$gson"

    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlin"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid"
    implementation "com.github.tbruyelle:rxpermissions:$rxpermissions"

    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"

    implementation "com.squareup.okhttp3:okhttp:$okhttp"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"

    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"

    implementation "com.github.bumptech.glide:glide:$glide"
    implementation "com.github.bumptech.glide:gifdecoder:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    implementation "pl.droidsonroids.gif:android-gif-drawable:$gifDrawable"
    implementation("com.giphy.sdk:core:$giphy") {
        transitive = true
    }

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"

    debugImplementation "com.github.markzhai:blockcanary-android:$blockcanary"
    releaseImplementation "com.github.markzhai:blockcanary-android:$blockcanary"
}

apply from: "${rootDir}/launch.gradle"